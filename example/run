#!/bin/bash
set -e -o pipefail
cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1

container="someapp"
postgres_version="8"
dbname="someapp"
dbpass="secret"

dbsargs=(--dbhost localhost --dbname "$dbname" --dbuser postgres --dbpassword "$dbpass")
psqlargs=(-h localhost -d "$dbname" -U postgres)
psqlscriptargs=(--echo-all -v ON_ERROR_STOP=1)

function cmd {
  echo 
  echo "> $*"
  command "$@"
}

function cmd_psql {
  PGPASSWORD=$dbpass cmd psql "${psqlargs[@]}" "${psqlscriptargs[@]}" "$@"
}

function _psql {
  PGPASSWORD=$dbpass command psql "${psqlargs[@]}" "${psqlscriptargs[@]}" "$@"
}

function build { # <file>: Generates a build of the given file
  echo "Building $1..."
  cmd go run .. --xml "$1" "${@:2}"
}

function diff { # <old> <new>: Generates a diff of <old> to <new>
  echo "Running diff $1 -> $2..."
  cmd go run .. --oldxml "$1" --newxml "$2" "${@:3}"
}

function extract { # <output> <conn args...>: Extracts the database at the given connection to the output file
  echo "Extracting (${*:2}) to $1..."
  cmd go run .. --dbschemadump --sqlformat pgsql8 --outputfile "$1" "${@:2}"
}

function pgsql-start { #: Starts and initializes a postgres db
  status="$(docker ps -a --format '{{.Status}}' -f "name=$container")"
  if [[ $status == Up* ]]; then
    echo "Example postgres db already running: ${dbsargs[*]}"
  else
    echo "Starting example postgres db: ${dbsargs[*]}"
    if [[ $status == Exited* ]]; then
      cmd docker start $container
    else
      cmd docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=$dbpass -e POSTGRES_DB=$dbname --name $container postgres:"$postgres_version"
    fi

    set +e
    while ! _psql -c "SELECT 1" 2>/dev/null ; do
      sleep 1
    done
    set -e

    if [[ $status != Exited* ]]; then
      pgsql-init
    fi
  fi
}

function pgsql-init { #: Initializes a postgres db
  echo "Initializing db"
  psql -c '
    CREATE ROLE someapp;
    CREATE ROLE someapp_readonly;
    CREATE ROLE pgsql;
  '
}

function pgsql-reset { #: Resets the postgres db to a fresh state
  echo "Resetting db"
  psql -d postgres -c "DROP DATABASE IF EXISTS $dbname;"
  psql -d postgres -c "CREATE DATABASE $dbname;"
  if [[ $postgres_version -lt 11 ]]; then
    psql -c '
      CREATE TRUSTED PROCEDURAL LANGUAGE plpgsql;
    '
  fi
}

function pgsql-load { # <file>: Loads the given sql file into the postgres database
  echo "Loading $1..."
  cmd_psql -f "$1"
}

function pgsql-load-stages { # <prefix>: Loads <prefix>_upgrade_*.sql files into the postgres database in order
  echo "Loading $1 stage 1..."
  cmd_psql -f "$1_upgrade_stage1_schema1.sql"
  echo "Loading $1 stage 2..."
  cmd_psql -f "$1_upgrade_stage2_data1.sql"
  echo "Loading $1 stage 3..."
  cmd_psql -f "$1_upgrade_stage3_schema1.sql"
  echo "Loading $1 stage 4..."
  cmd_psql -f "$1_upgrade_stage4_data1.sql"
}

function psql { #: Opens a psql shell to the postgres database
  PGPASSWORD="$dbpass" command psql "${psqlargs[@]}" "$@"
}

function someapp-clean { #: Remove generated files
  echo "Cleaning dir"
  cmd rm -f ./*_{composite,extracted}.xml ./*.sql
}

function someapp-build { #: Generates a build of someapp v1
  build someapp_v1.xml "$@"
}

function someapp-diff { #: Generates a diff of someapp v1 -> v2
  diff someapp_v1.xml someapp_v2.xml "$@"
}

function someapp-load-v1 { #: Loads the v1 schema from someapp-build
  pgsql-load someapp_v1_build.sql
}

function someapp-load-v2 { #: Loads the v2 upgrade from someapp-diff
  pgsql-load-stages someapp_v2
}

function someapp-extract { #: Extracts the current someapp schema from the postgres db
  extract someapp_extracted.xml "${dbsargs[@]}" "$@"
}

function someapp-diff-extract { #: Diffs the extracted someapp schema against v2
  diff someapp_v2.xml someapp_extracted.xml "$@"
}

function all { #: Reruns the full example suite
  clean
  someapp-build "$@"
  echo "------"
  someapp-diff "$@"
  echo "------"
  pgsql-start
  echo "------"
  pgsql-reset
  echo "------"
  someapp-load-v1
  echo "------"
  someapp-load-v2
  echo "------"
  someapp-extract "$@"
  echo "------"
  someapp-diff-extract "$@"
}

if [[ $# -eq 0 || "$1" == "help" || "$1" == "--help" ]]; then
  if [[ "$(type -t "$2")" ==  "function" ]]; then
    type "$2"
  else
    echo "Commands:"
    sed -En 's/^function (.*) \{ #/  \1/p' "$(basename "$0")"
    echo
    echo "Environment Variables:"
    sed -En 's/^: "\$\{(.+):=(.+)\}"( #)?/  \1=\2\t/p' "$(basename "$0")"
  fi
else
  "$@"
fi