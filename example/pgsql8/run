#!/bin/bash
# shellcheck disable=SC1090
source "$(dirname "$0")/../../dev/include.sh" #follow

pg_container="someapp_pgsql8"
dbname="someapp"
dbpass="secret"
dbsargs=(--dbhost localhost --dbname "$dbname" --dbuser postgres --dbpassword "$dbpass")
psqlargs=(-h localhost -d "$dbname" -U postgres)
psqlscriptargs=(--echo-all -v ON_ERROR_STOP=1)

# version 8 becomes 80, version 12.3 becomes 123
# used in version checks below
pg_version="8"
pgversion=$((pg_version * 10))

function cmd_psql {
  PGPASSWORD=$dbpass cmd psql "${psqlargs[@]}" "${psqlscriptargs[@]}" "$@"
}

function _psql {
  PGPASSWORD=$dbpass command psql "${psqlargs[@]}" "${psqlscriptargs[@]}" "$@"
}
function psql {
  PGPASSWORD="$dbpass" command psql "${psqlargs[@]}" "$@"
}

function pgsql-start { #: Starts and initializes a postgres db
  status="$(docker ps -a --format '{{.Status}}' -f "name=$pg_container")"
  if [[ $status == Up* ]]; then
    info "Example postgres db already running: ${dbsargs[*]}"
  else
    info "Starting example postgres db: ${dbsargs[*]}"
    if [[ $status == Exited* ]]; then
      cmd docker start $pg_container
    else
      cmd docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=$dbpass -e POSTGRES_DB=$dbname --name $pg_container postgres:"$pg_version"
    fi

    set +e
    while ! _psql -c "SELECT 1" 2>/dev/null ; do
      info "Waiting for docker..."
      sleep 1
    done
    set -e

    if [[ $status != Exited* ]]; then
      pgsql-init
    fi
  fi
}

function pgsql-init { #: Initializes a postgres db
  info "Initializing db"
  psql -c '
    CREATE ROLE someapp;
    CREATE ROLE someapp_readonly;
    CREATE ROLE pgsql;
  '
}

function pgsql-reset { #: Resets the postgres db to a fresh state
  info "Resetting db"
  if [[ $pgversion -lt 92 ]]; then
    psql -d postgres -c "
      SELECT pg_terminate_backend(pg_stat_activity.procpid)
      FROM pg_stat_activity
      WHERE pg_stat_activity.datname = '$dbname'
        AND procpid <> pg_backend_pid()
    "
  else
    psql -d postgres -c "
      SELECT pg_terminate_backend(pg_stat_activity.pid)
      FROM pg_stat_activity
      WHERE pg_stat_activity.datname = '$dbname'
        AND pid <> pg_backend_pid();
    "
  fi
  psql -d postgres -c "DROP DATABASE IF EXISTS $dbname;"
  psql -d postgres -c "CREATE DATABASE $dbname;"
  if [[ $pgversion -lt 110 ]]; then
    psql -c '
      CREATE TRUSTED PROCEDURAL LANGUAGE plpgsql;
    '
  fi
}

# "public" tasks here, for use with ../run

function init-db { #: Initializes the database
  pgsql-start
  pgsql-reset
}

function load-file { # <file>: Loads the given sql file into the postgres database
  info "Loading $1..."
  cmd_psql -f "$1"
}

function load-stages { # <prefix>: Loads <prefix>_upgrade_*.sql files into the postgres database in order
  info "Loading $1 stage 1..."
  cmd_psql -f "$1_upgrade_stage1_schema1.sql"
  info "Loading $1 stage 2..."
  cmd_psql -f "$1_upgrade_stage2_data1.sql"
  info "Loading $1 stage 3..."
  cmd_psql -f "$1_upgrade_stage3_schema1.sql"
  info "Loading $1 stage 4..."
  cmd_psql -f "$1_upgrade_stage4_data1.sql"
}

function extract { # <output> [...args]: Extracts the database to the output file
  ../run extract-format pgsql8 "$1" "${dbsargs[@]}" "${@:2}"
}

function shell { #: Opens a psql shell to the postgres database
  psql "$@"
}

main "$@"